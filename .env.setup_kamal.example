# Kamal Setup Configuration Template
# Copy this file to .env.setup_kamal and fill in your values
# This file will be used when running setup_kamal with --dev -p flag
# This file is for a specific architecture and will need to be adjusted to your specific needs.

# Domain Configuration
FRONTEND_DOMAIN=assets.yourdomain.com
API_DOMAIN=assets-api.yourdomain.com

# Deployment Server Configuration
SERVER_HOST=your-server.yourdomain.com
SSH_USER=root
SSH_PORT=22

# Docker Registry Configuration (DigitalOcean)
REGISTRY_SERVER=registry.digitalocean.com # or wherever your registry is located
REGISTRY_NAMESPACE=your-namespace
REGISTRY_USERNAME=do_access_token
KAMAL_REGISTRY_TOKEN=your_digitalocean_token_here

# Database Configuration
POSTGRES_PASSWORD=your_secure_database_password_here
DATABASE_NAME=asset_management_production

# Storage Configuration (currently only local is supported)
STORAGE_TYPE=local

# SSL Configuration
SSL_EMAIL=your-email@example.com

# Application Configuration
RAILS_ENV=production
WEB_CONCURRENCY=2
RAILS_MAX_THREADS=5

# Enable/Disable Signup functionality
SIGNUP_ENABLED=true

# Build Platform Configuration (amd64 or arm64)
BUILD_ARCH=amd64

# Monitoring & Logging
DETAILED_LOGGING=true
LOG_LEVEL=info

# =============================================================================
# INSTRUCTIONS FOR SETTING UP CLOUDFLARE SSL CERTIFICATES
# =============================================================================
#
# 1. Log into your Cloudflare dashboard
# 2. Go to SSL/TLS > Origin Server
# 3. Click "Create Certificate"
# 4. Select "Let Cloudflare generate a private key and a CSR"
# 5. Set the hostnames to:
#    - *.yourdomain.com (for wildcard)
#    - yourdomain.com (for root domain)
# 6. Set certificate validity to 15 years
# 7. Copy the "Origin Certificate" and paste it into ssl-cert.pem
# 8. Copy the "Private Key" and paste it into ssl-key.pem
# 9. The setup script will automatically read from these files
#
# Certificate files (DO NOT COMMIT TO GIT):
# - ssl-cert.pem (Cloudflare Origin Certificate)
# - ssl-key.pem (Cloudflare Private Key)
#
# =============================================================================
# DNS SETUP REQUIREMENTS
# =============================================================================
#
# You need to create THREE DNS A records pointing to your server:
# - Frontend domain → Your server IP
# - API domain → Your server IP  
# - Server domain → Your server IP
#
# Example DNS records:
# assets.yourdomain.com       A    YOUR_SERVER_IP
# assets-api.yourdomain.com   A    YOUR_SERVER_IP
# your-server.yourdomain.com  A    YOUR_SERVER_IP
#
# =============================================================================
# DEPLOYMENT ARCHITECTURE
# =============================================================================
#
# This configuration sets up a two-service architecture:
#
# 1. Frontend Service (Next.js)
#    - Domain: https://assets.yourdomain.com
#    - Handles web interface and user interactions
#    - Uses Cloudflare SSL certificates
#
# 2. API Service (Rails)
#    - Domain: https://assets-api.yourdomain.com  
#    - Handles backend API endpoints
#    - Uses Cloudflare SSL certificates
#    - Accessible via separate subdomain for security
#
# Both services run on the same server but are accessible via different domains
# with full SSL encryption using Cloudflare Origin Certificates.
#
# =============================================================================
